{
  "name": "AOEC - Agente Observatorio Económico Colombia (v1.110.1)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "days",
              "daysInterval": 1,
              "triggerAtHour": 8,
              "triggerAtMinute": 0
            }
          ]
        }
      },
      "id": "Cron_1",
      "name": "Cron Diario",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [-760, 20]
    },
    {
      "parameters": {
        "functionCode": "// Emite un item por indicador que queremos consultar\nreturn [\n  { json: { indicator: 'FP.CPI.TOTL.ZG', name: 'Inflación (%)' } },\n  { json: { indicator: 'SL.UEM.TOTL.ZS', name: 'Desempleo (%)' } },\n  { json: { indicator: 'NY.GDP.MKTP.CD', name: 'PIB (USD corrientes)' } }\n];"
      },
      "id": "Function_Preparar",
      "name": "Preparar Indicadores",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-520, 20]
    },
    {
      "parameters": {
        "url": "https://api.worldbank.org/v2/country/CO/indicator/{{$json[\"indicator\"]}}?format=json&per_page=60",
        "responseFormat": "json",
        "options": {}
      },
      "id": "HTTP_WB",
      "name": "WB API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-280, 20]
    },
    {
      "parameters": {
        "functionCode": "// Procesa respuesta del Banco Mundial y toma último y anterior válido\nconst out = [];\nfor (const item of items) {\n  const ind = item.json.indicator;\n  const name = item.json.name;\n  const payload = item.json.body || item.json;\n  const dataArray = Array.isArray(payload) ? payload[1] : payload?.[1];\n  if (!Array.isArray(dataArray)) {\n    out.push({ json: { indicator: ind, name, latest_date: null, latest_value: null, prev_date: null, prev_value: null, delta: null }});\n    continue;\n  }\n  const cleaned = dataArray.filter(r => r && r.value !== null).sort((a,b) => parseInt(b.date,10) - parseInt(a.date,10));\n  const latest = cleaned[0] || null;\n  const prev   = cleaned[1] || null;\n  const latest_value = latest ? Number(latest.value) : null;\n  const prev_value   = prev   ? Number(prev.value)   : null;\n  const delta = (latest_value != null && prev_value != null) ? (latest_value - prev_value) : null;\n  out.push({ json: { indicator: ind, name, latest_date: latest ? latest.date : null, latest_value, prev_date: prev ? prev.date : null, prev_value, delta }});\n}\nreturn out;"
      },
      "id": "Function_ProcesarWB",
      "name": "Procesar WB",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-40, 20]
    },
    {
      "parameters": {
        "functionCode": "// Construye CSV + resumen + banderas de alerta\nconst ALERTA_DELTA_PP = 1.0; // cambio >= 1 punto\nconst ALERTA_INFLACION = 10.0; // inflación alta\nconst FECHA = new Date().toISOString().slice(0,10);\nconst rows = [];\nlet hayAlerta = false;\nlet alertas = [];\nfor (const it of items) {\n  const { indicator, name, latest_date, latest_value, prev_date, prev_value, delta } = it.json;\n  rows.push({ indicator, name, latest_date, latest_value, prev_date, prev_value, delta });\n  if (indicator === 'FP.CPI.TOTL.ZG' && latest_value != null && latest_value > ALERTA_INFLACION) {\n    hayAlerta = true;\n    alertas.push(`Inflación alta: ${latest_value.toFixed(2)}% (${latest_date})`);\n  }\n  if (delta != null && Math.abs(delta) >= ALERTA_DELTA_PP) {\n    hayAlerta = true;\n    alertas.push(`${name}: variación ${delta.toFixed(2)} (de ${prev_value} en ${prev_date} a ${latest_value} en ${latest_date})`);\n  }\n}\nconst header = ['indicator','name','latest_date','latest_value','prev_date','prev_value','delta'];\nconst csvLines = [header.join(',')];\nfor (const r of rows) {\n  csvLines.push([\n    r.indicator,\n    `\"${(r.name||'').replace(/\"/g,'\"\"')}\"`,\n    r.latest_date ?? '',\n    r.latest_value ?? '',\n    r.prev_date ?? '',\n    r.prev_value ?? '',\n    r.delta ?? ''\n  ].join(','));\n}\nconst csv = csvLines.join('\\n');\nconst resumen = rows.map(r => {\n  const v = (r.latest_value != null) ? r.latest_value.toLocaleString('en-US', {maximumFractionDigits: 2}) : 'NA';\n  const d = (r.delta != null) ? (r.delta>0?`+${r.delta.toFixed(2)}`:r.delta.toFixed(2)) : 'NA';\n  return `• ${r.name}: ${v} (año ${r.latest_date}), Δ ${d}`;\n}).join('\\n');\nconst resumenGeneral = `AOEC — Reporte ${FECHA}\\n${resumen}`;\nreturn [{ json: { fecha: FECHA, csv, resumen: resumenGeneral, hayAlerta, alertas } }];"
      },
      "id": "Function_Report",
      "name": "Construir Reporte",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [220, 20]
    },
    {
      "parameters": {
        "operation": "upsert",
        "owner": "alvaromutis222-arch",
        "repository": "n8n",
        "filePath": "data/indicadores_co.csv",
        "fileContent": "={{$json[\"csv\"]}}",
        "branch": "main",
        "commitMessage": "chore(data): update indicadores_co {{$json[\"fecha\"]}}"
      },
      "id": "GitHub_Node",
      "name": "Subir a GitHub",
      "type": "n8n-nodes-base.github",
      "typeVersion": 2,
      "position": [480, 20],
      "credentials": {
        "githubApi": {
          "id": "auto",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=Colombia+econom%C3%ADa+OR+inflaci%C3%B3n+OR+DANE+OR+%22Banco%20de%20la%20Rep%C3%BAblica%22&hl=es-419&gl=CO&ceid=CO:es-419"
      },
      "id": "RSS_Read",
      "name": "Noticias (RSS)",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 2,
      "position": [-520, 260]
    },
    {
      "parameters": {
        "functionCode": "// Toma top 3 titulares del feed\nconst top = items.slice(0,3).map((it, i) => {\n  const title = it.json.title || 'Sin título';\n  const link = it.json.link  || '#';\n  return `${i+1}. ${title}\\n   ${link}`;\n}).join('\\n');\nreturn [{ json: { rss_message: `\\n\\nTitulares económicos (top 3):\\n${top}` } }];"
      },
      "id": "Function_TopNews",
      "name": "Top Noticias",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-280, 260]
    },
    {
      "parameters": {
        "mode": "mergeByPosition"
      },
      "id": "Merge_Node",
      "name": "Merge Reporte + Noticias",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [740, 140]
    },
    {
      "parameters": {
        "chatId": "1433363510",
        "text": "={{$json[\"resumen\"] + ($json[\"rss_message\"] || \"\") + \"\\n\\n\" + \"Dataset: https://raw.githubusercontent.com/alvaromutis222-arch/n8n/main/data/indicadores_co.csv\"}}"
      },
      "id": "Telegram_Send_Diario",
      "name": "Enviar Telegram (Diario)",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [980, 20],
      "credentials": {
        "telegramApi": {
          "id": "auto",
          "name": "Telegram-AOEC"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"hayAlerta\"]}}"
            }
          ]
        }
      },
      "id": "IF_Alerta",
      "name": "IF Alerta",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [980, 260]
    },
    {
      "parameters": {
        "chatId": "1433363510",
        "text": "={{\"⚠️ ALERTA AOEC\\n\" + ($json[\"alertas\"] && $json[\"alertas\"].length ? $json[\"alertas\"].map(a=>\"• \"+a).join(\"\\n\") : \"Sin detalles\")}}"
      },
      "id": "Telegram_Send_Alerta",
      "name": "Enviar Telegram (Alerta)",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1220, 260],
      "credentials": {
        "telegramApi": {
          "id": "auto",
          "name": "Telegram-AOEC"
        }
      }
    }
  ],
  "connections": {
    "Cron Diario": {
      "main": [
        [
          {
            "node": "Preparar Indicadores",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Noticias (RSS)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Indicadores": {
      "main": [
        [
          {
            "node": "WB API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WB API": {
      "main": [
        [
          {
            "node": "Procesar WB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar WB": {
      "main": [
        [
          {
            "node": "Construir Reporte",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir Reporte": {
      "main": [
        [
          {
            "node": "Subir a GitHub",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Reporte + Noticias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Noticias (RSS)": {
      "main": [
        [
          {
            "node": "Top Noticias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top Noticias": {
      "main": [
        [
          {
            "node": "Merge Reporte + Noticias",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Reporte + Noticias": {
      "main": [
        [
          {
            "node": "Enviar Telegram (Diario)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF Alerta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Alerta": {
      "main": [
        [
          {
            "node": "Enviar Telegram (Alerta)",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "pinData": {},
  "staticData": {},
  "settings": {},
  "meta": {
    "templateCredsSetup": []
  },
  "active": true
}
